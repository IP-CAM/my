<modification>
	<id>Warehouse</id>
	<version>1.0.0</version>
	<vqmver>2.1.5</vqmver>
	<author>xuan</author>
	
	<file name="2015admin/model/catalog/product.php">
		<operation>
			<search position="replace"><![CDATA[$this->db->query("INSERT INTO " . DB_PREFIX . "product SET model = '" . $this->db->escape($data['model']) . "', sku = '" . $this->db->escape($data['sku']) . "', upc = '" . $this->db->escape($data['upc']) . "', ean = '" . $this->db->escape($data['ean']) . "', jan = '" . $this->db->escape($data['jan']) . "', isbn = '" . $this->db->escape($data['isbn']) . "', mpn = '" . $this->db->escape($data['mpn']) . "', location = '" . $this->db->escape($data['location']) . "', quantity = '" . (int)$data['quantity'] . "', minimum = '" . (int)$data['minimum'] . "', subtract = '" . (int)$data['subtract'] . "', stock_status_id = '" . (int)$data['stock_status_id'] . "', image_http = '" . (int)$data['image_http'] . "', date_available = '" . $this->db->escape($data['date_available']) . "', manufacturer_id = '" . (int)$data['manufacturer_id'] . "', shipping = '" . (int)$data['shipping'] . "', price = '" . (float)$data['price'] . "', cost = '" . (float)$data['cost'] . "', points = '" . (int)$data['points'] . "', weight = '" . (float)$data['weight'] . "', weight_class_id = '" . (int)$data['weight_class_id'] . "', length = '" . (float)$data['length'] . "', width = '" . (float)$data['width'] . "', height = '" . (float)$data['height'] . "', length_class_id = '" . (int)$data['length_class_id'] . "', status = '" . (int)$data['status'] . "', tax_class_id = '" . $this->db->escape($data['tax_class_id']) . "', sort_order = '" . (int)$data['sort_order'] . "', date_added = NOW()");]]></search>
			<add><![CDATA[
			$quantity = 0;
			
			if (isset($data['product_warehouse']) &&
				is_array($data['product_warehouse']) &&
				isset($data['warehouse_type']) &&
				$data['warehouse_type'] == 'standard')
			{
				foreach ($data['product_warehouse'] as $warehouse) {
					$quantity += (int)$warehouse['quantity'];
				}
			} else {
				$quantity = $data['quantity'];
			}
			
			if (isset($data['warehouse_type']) && $data['warehouse_type'] == 'combo'  && !empty($data['warehouse_combo']) && is_array($data['warehouse_combo'])) {
				$warehouse_combo = array();
				
				foreach ($data['warehouse_combo'] as $key => $combo) {
					$warehouse_combo[$key] = array(
						'product_id'  => (int)$combo['product_id'],
						'quantity'    => (int)$combo['quantity']
					);
				}
				
				$warehouse_combo = serialize($warehouse_combo);
			} else {
				$warehouse_combo = '';
			}
			
			$this->db->query("INSERT INTO " . DB_PREFIX . "product SET model = '" . $this->db->escape($data['model']) . "', sku = '" . $this->db->escape($data['sku']) . "', upc = '" . $this->db->escape($data['upc']) . "', ean = '" . $this->db->escape($data['ean']) . "', jan = '" . $this->db->escape($data['jan']) . "', isbn = '" . $this->db->escape($data['isbn']) . "', mpn = '" . $this->db->escape($data['mpn']) . "', location = '" . $this->db->escape($data['location']) . "', quantity = '" . (int)$quantity . "', minimum = '" . (int)$data['minimum'] . "', subtract = '" . (int)$data['subtract'] . "', stock_status_id = '" . (int)$data['stock_status_id'] . "', image_http = '" . (int)$data['image_http'] . "', date_available = '" . $this->db->escape($data['date_available']) . "', manufacturer_id = '" . (int)$data['manufacturer_id'] . "', shipping = '" . (int)$data['shipping'] . "', price = '" . (float)$data['price'] . "', cost = '" . (float)$data['cost'] . "', points = '" . (int)$data['points'] . "', weight = '" . (float)$data['weight'] . "', weight_class_id = '" . (int)$data['weight_class_id'] . "', length = '" . (float)$data['length'] . "', width = '" . (float)$data['width'] . "', height = '" . (float)$data['height'] . "', length_class_id = '" . (int)$data['length_class_id'] . "', status = '" . (int)$data['status'] . "', warehouse_priority = '" . (int)$data['warehouse_priority'] . "', warehouse_type = '" . $this->db->escape($data['warehouse_type']) . "', warehouse_combo = '" . $this->db->escape($warehouse_combo) . "', tax_class_id = '" . $this->db->escape($data['tax_class_id']) . "', sort_order = '" . (int)$data['sort_order'] . "', date_added = NOW()");
			
			
			]]></add>
		</operation>
		
		<operation>
			<search position="after"><![CDATA[$product_id = $this->db->getLastId();]]></search>
			<add><![CDATA[
			
			$this->db->query("DELETE FROM " . DB_PREFIX . "product_warehouse WHERE product_id = '".(int)$product_id."'");
			
			if (isset($data['product_warehouse']) && is_array($data['product_warehouse']) && $data['warehouse_type'] == 'standard') {
				foreach ($data['product_warehouse'] as $warehouse_id => $w) {
					$this->db->query("INSERT INTO " . DB_PREFIX . "product_warehouse SET product_id = '".(int)$product_id."', warehouse_id = '".(int)$warehouse_id."',  priority = '".(int)$w['priority']."', quantity = '".(int)$w['quantity']."', rack = '".$this->db->escape($w['rack'])."'");
				}
			}
			
			
			]]></add>
		</operation>
		
		<operation>
			<search position="replace"><![CDATA[$this->db->query("UPDATE " . DB_PREFIX . "product SET model = '" . $this->db->escape($data['model']) . "', sku = '" . $this->db->escape($data['sku']) . "', upc = '" . $this->db->escape($data['upc']) . "', ean = '" . $this->db->escape($data['ean']) . "', jan = '" . $this->db->escape($data['jan']) . "', isbn = '" . $this->db->escape($data['isbn']) . "', mpn = '" . $this->db->escape($data['mpn']) . "', location = '" . $this->db->escape($data['location']) . "', quantity = '" . (int)$data['quantity'] . "', minimum = '" . (int)$data['minimum'] . "', subtract = '" . (int)$data['subtract'] . "', stock_status_id = '" . (int)$data['stock_status_id'] . "', image_http = '" . (int)$data['image_http'] . "', date_available = '" . $this->db->escape($data['date_available']) . "', manufacturer_id = '" . (int)$data['manufacturer_id'] . "', shipping = '" . (int)$data['shipping'] . "', price = '" . (float)$data['price'] . "', cost = '" . (float)$data['cost'] . "', points = '" . (int)$data['points'] . "', weight = '" . (float)$data['weight'] . "', weight_class_id = '" . (int)$data['weight_class_id'] . "', length = '" . (float)$data['length'] . "', width = '" . (float)$data['width'] . "', height = '" . (float)$data['height'] . "', length_class_id = '" . (int)$data['length_class_id'] . "', status = '" . (int)$data['status'] . "', tax_class_id = '" . $this->db->escape($data['tax_class_id']) . "', sort_order = '" . (int)$data['sort_order'] . "', date_modified = NOW() WHERE product_id = '" . (int)$product_id . "'");]]></search>
			<add><![CDATA[
			$quantity = 0;
			
			if (isset($data['product_warehouse']) &&
				is_array($data['product_warehouse']) &&
				isset($data['warehouse_type']) &&
				$data['warehouse_type'] == 'standard')
			{
				foreach ($data['product_warehouse'] as $warehouse) {
					$quantity += (int)$warehouse['quantity'];
				}
			} else {
				$quantity = $data['quantity'];
			}
			
			if (isset($data['warehouse_type']) && $data['warehouse_type'] == 'combo' && !empty($data['warehouse_combo']) && is_array($data['warehouse_combo'])) {
				$warehouse_combo = array();
				
				foreach ($data['warehouse_combo'] as $key => $combo) {
					$warehouse_combo[$key] = array(
						'product_id'  => (int)$combo['product_id'],
						'quantity'    => (int)$combo['quantity']
					);
				}
				
				$warehouse_combo = serialize($warehouse_combo);
			} else {
				$warehouse_combo = '';
			}
			
			$this->db->query("UPDATE " . DB_PREFIX . "product SET model = '" . $this->db->escape($data['model']) . "', sku = '" . $this->db->escape($data['sku']) . "', upc = '" . $this->db->escape($data['upc']) . "', ean = '" . $this->db->escape($data['ean']) . "', jan = '" . $this->db->escape($data['jan']) . "', isbn = '" . $this->db->escape($data['isbn']) . "', mpn = '" . $this->db->escape($data['mpn']) . "', location = '" . $this->db->escape($data['location']) . "', quantity = '" . (int)$quantity . "', minimum = '" . (int)$data['minimum'] . "', subtract = '" . (int)$data['subtract'] . "', stock_status_id = '" . (int)$data['stock_status_id'] . "', image_http = '" . (int)$data['image_http'] . "', date_available = '" . $this->db->escape($data['date_available']) . "', manufacturer_id = '" . (int)$data['manufacturer_id'] . "', shipping = '" . (int)$data['shipping'] . "', price = '" . (float)$data['price'] . "', cost = '" . (float)$data['cost'] . "', points = '" . (int)$data['points'] . "', weight = '" . (float)$data['weight'] . "', weight_class_id = '" . (int)$data['weight_class_id'] . "', length = '" . (float)$data['length'] . "', width = '" . (float)$data['width'] . "', height = '" . (float)$data['height'] . "', length_class_id = '" . (int)$data['length_class_id'] . "', status = '" . (int)$data['status'] . "', warehouse_priority = '" . (int)$data['warehouse_priority'] . "', warehouse_type = '" . $this->db->escape($data['warehouse_type']) . "', warehouse_combo = '" . $this->db->escape($warehouse_combo) . "', tax_class_id = '" . $this->db->escape($data['tax_class_id']) . "', sort_order = '" . (int)$data['sort_order'] . "', date_modified = NOW() WHERE product_id = '" . (int)$product_id . "'");
			
			$this->db->query("DELETE FROM " . DB_PREFIX . "product_warehouse WHERE product_id = '".(int)$product_id."'");
			
			if (isset($data['product_warehouse']) && is_array($data['product_warehouse']) && $data['warehouse_type'] == 'standard') {
				foreach ($data['product_warehouse'] as $warehouse_id => $w) {
					$this->db->query("INSERT INTO " . DB_PREFIX . "product_warehouse SET product_id = '".(int)$product_id."', warehouse_id = '".(int)$warehouse_id."',  priority = '".(int)$w['priority']."', quantity = '".(int)$w['quantity']."', rack = '".$this->db->escape($w['rack'])."'");
				}
			}
			
			]]></add>
		</operation>
		
		<operation>
			<search position="before"><![CDATA[public function getProduct($product_id) {]]></search>
			<add><![CDATA[
			
			public function getWarehouses() {
				$query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "warehouse` ORDER BY name");
				
				return $query->rows;
			}
			
			public function getProductWarehouse($product_id) {
				$data = array();
				
				$query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "product_warehouse` WHERE product_id = '".(int)$product_id."'");
				
				if ($query->num_rows) {
					foreach ($query->rows as $warehouse) {
						$data[$warehouse['warehouse_id']] = array(
							'priority' => $warehouse['priority'],
							'quantity' => $warehouse['quantity'],
							'rack' => $warehouse['rack']
						);
					}
				};
				
				return $data;
			}
			
			]]></add>
		</operation>
	</file>
	
	<file name="2015admin/controller/catalog/product.php">
		<operation>
			<search position="before"><![CDATA[if (isset($this->request->post['location'])) {]]></search>
			<add><![CDATA[
			if (isset($this->request->post['warehouse_type'])) {
				$data['warehouse_type'] = $this->request->post['warehouse_type'];
			} elseif (!empty($product_info) && isset($product_info['warehouse_type'])) {
				$data['warehouse_type'] = $product_info['warehouse_type'];
			} else {
				$data['warehouse_type'] = '';
			}
			
			if (isset($this->request->post['warehouse_priority'])) {
				$data['warehouse_priority'] = $this->request->post['warehouse_priority'];
			} elseif (!empty($product_info) && isset($product_info['warehouse_priority'])) {
				$data['warehouse_priority'] = $product_info['warehouse_priority'];
			} else {
				$data['warehouse_priority'] = 0;
			}
			
			if (isset($this->request->post['product_warehouse'])) {
				$data['product_warehouse'] = $this->request->post['product_warehouse'];
			} elseif (!empty($product_info)) {
				$data['product_warehouse'] = $this->model_catalog_product->getProductWarehouse($product_info['product_id']);
			} else {
				$data['product_warehouse'] = array();
			}
			
			$data['warehouses'] = $this->model_catalog_product->getWarehouses();

			if (isset($this->request->post['warehouse_combo'])) {
				$combos = $this->request->post['warehouse_combo'];
			} elseif (!empty($product_info) && !empty($product_info['warehouse_combo'])) {
				$combos = unserialize($product_info['warehouse_combo']);
			} else {
				$combos = array();
			}
	
			$data['warehouse_combos'] = array();
	
			foreach ($combos as $combo) {
				$combo_info = $this->model_catalog_product->getProduct($combo['product_id']);
	
				if ($combo_info) {
					$data['warehouse_combos'][] = array(
						'product_id' => $combo_info['product_id'],
						'name'       => $combo_info['name'],
						'quantity'   => $combo['quantity']
					);
				}
			}
			
			]]></add>
		</operation>		
	</file>
	
	<file name="2015admin/view/template/catalog/product_form.tpl">
		<operation>
			<search position="before"><![CDATA[<label class="col-sm-2 control-label" for="input-price"><?php echo $entry_price; ?></label>]]></search>
			<add><![CDATA[
			
                <label class="col-sm-2 control-label" for="input-product-type">商品类型<br />(Product Type)</label>
                <div class="col-sm-10">
                  <select name="warehouse_type" id="input-product-type" class="form-control"
				  			onChange="
							$('#warehouse-priority, #warehouse, #combo').toggle();">
                    <?php if ($warehouse_type == 'combo') { ?>
                    <option value="standard">标准类型(Standard)</option>
                    <option value="combo" selected="selected">组合类型(Combo)</option>
                    <?php } else { ?>
                    <option value="standard" selected="selected">标准类型(Standard)</option>
                    <option value="combo">组合类型(Combo)</option>
                    <?php } ?>
                  </select>
                </div>
              </div>
              <div class="form-group" id="combo" style="<?php echo $warehouse_type == 'combo'?'':'display:none;'; ?>">
                <label class="col-sm-2 control-label" for="input-warehouse-combo">组合商品<br />(Products)</label>
                <div class="col-sm-10">
                  <input type="text" name="combo_product" value="" placeholder="<?php echo $entry_related; ?>" id="input-warehouse-combo" class="form-control" />
                  <div id="warehouse-combo" class="well well-sm" style="height: 150px; padding:0; overflow: auto;">
                    <?php $combo_row = 0; ?>
                    <?php foreach ($warehouse_combos as $warehouse_combo) { ?>
                    <div id="warehouse-combo<?php echo $warehouse_combo['product_id']; ?>" style="padding:10px; border-bottom:1px #999 dotted;">
					  <i class="fa fa-minus-circle"></i>
                      <input type="text" name="warehouse_combo[<?php echo $combo_row; ?>][quantity]" value="<?php echo $warehouse_combo['quantity']; ?>" style="width:50px;" /> - <?php echo $warehouse_combo['name']; ?>
                      <input type="hidden" name="warehouse_combo[<?php echo $combo_row; ?>][product_id]" value="<?php echo $warehouse_combo['product_id']; ?>" />
                    </div>
                    <?php $combo_row ++; ?>
                    <?php } ?>
                  </div>
                </div>
              </div>
			  <div class="form-group" id="warehouse-priority" style="<?php echo $warehouse_type == 'combo'?'display:none;':''; ?>">
                <label class="col-sm-2 control-label" for="input-warehouse-priority">启用优先级<br />(Warehouse Priority)</label>
                <div class="col-sm-10">
                  <select name="warehouse_priority" id="input-warehouse-priority" class="form-control">
                    <?php if ($warehouse_priority) { ?>
                    <option value="1" selected="selected"><?php echo $text_yes; ?></option>
                    <option value="0"><?php echo $text_no; ?></option>
                    <?php } else { ?>
                    <option value="1"><?php echo $text_yes; ?></option>
                    <option value="0" selected="selected"><?php echo $text_no; ?></option>
                    <?php } ?>
                  </select>
                </div>
              </div>
			  <div class="form-group" id="warehouse" style="<?php echo $warehouse_type == 'combo'?'display:none;':''; ?>">
                <label class="col-sm-2 control-label" for="input-warehouse"><span data-toggle="tooltip" title="关于优先级：启用优先级后，当配送地址区域库存不足时将会按该优先级发货。">所属仓库</span><br />(Warehouse)</label>
                <div class="col-sm-10">
					<?php foreach ($warehouses as $w) { ?>
                  <div style="margin:0px -15px; margin-bottom:15px; overflow:hidden;">
					  <div class="col-sm-3">
					  	仓库：<span class="form-control"><?php echo $w['name']; ?></span>
						<input type="hidden" name="product_warehouse[<?php echo $w['warehouse_id']; ?>][code]" value="<?php echo $w['code']; ?>" class="form-control" />
					  </div>
					  <div class="col-sm-1">优先级：<input type="text" name="product_warehouse[<?php echo $w['warehouse_id']; ?>][priority]" value="<?php echo ($product_warehouse && isset($product_warehouse[$w['warehouse_id']]))?$product_warehouse[$w['warehouse_id']]['priority']:0; ?>" class="form-control" /></div>
					  <div class="col-sm-2">数量：<input type="text" name="product_warehouse[<?php echo $w['warehouse_id']; ?>][quantity]" value="99999" class="form-control" /></div>
					  <div class="col-sm-6">位置：<input type="text" name="product_warehouse[<?php echo $w['warehouse_id']; ?>][rack]" value="<?php echo ($product_warehouse && isset($product_warehouse[$w['warehouse_id']]))?$product_warehouse[$w['warehouse_id']]['rack']:''; ?>" placeholder="<?php echo $entry_location; ?>" class="form-control" /></div>
					</div>
					<?php } ?>
                </div>
              </div>
			  <div class="form-group">
			
			
			
			
			]]></add>
		</operation>
		
		<operation>
			<search position="before"><![CDATA[// Related]]></search>
			<add><![CDATA[
			
// Combo Product
var combo_row = <?php echo $combo_row; ?>;

$('input[name=\'combo_product\']').autocomplete({
	'source': function(request, response) {
		$.ajax({
			url: 'index.php?route=catalog/product/autocomplete&token=<?php echo $token; ?>&filter_name=' +  encodeURIComponent(request),
			dataType: 'json',			
			success: function(json) {
				response($.map(json, function(item) {
					return {
						label: item['name'],
						value: item['product_id']
					}
				}));
			}
		});
	},
	'select': function(item) {
		$('input[name=\'combo\']').val('');
		
		$('#warehouse-combo' + item['value']).remove();
		
		var html  = '<div id="warehouse-combo' + item['value'] + '" style="padding:10px; border-bottom:1px #666 dotted;">';
			html += '<i class="fa fa-minus-circle"></i> ';
			html += '<input type="text" name="warehouse_combo['+combo_row+'][quantity]" value="1" style="width:50px;" /> - ';
			html += item['label'] + '<input type="hidden" name="warehouse_combo['+combo_row+'][product_id]" value="' + item['value'] + '" />';
			html += '</div>';
		
		$('#warehouse-combo').append(html);
		
		combo_row ++;
	}	
});

$('#warehouse-combo').delegate('.fa-minus-circle', 'click', function() {
	$(this).parent().remove();
});

			]]></add>
		</operation>
	</file>
</modification>